program main
   use cudafor
   use dot_acc_m
   use dot_m
 
   integer :: AllocateStatus
   integer :: i, j, m, n
   real, allocatable :: A(:,:)
   real, allocatable :: B(:,:)
   real, allocatable :: C(:)
   real, allocatable :: D(:)

   real, device, allocatable :: A_d(:,:)
   real, device, allocatable :: B_d(:,:)
   real, device, allocatable :: C_d(:)

   m = 4096
   n = 4096
   
   ! Allocate arrays using Fortran allocate
   allocate( A(m,n), stat = AllocateStatus)
   IF (AllocateStatus /= 0) STOP "*** Not enough memory ***"

   allocate( B(m,n), stat = AllocateStatus)
   IF (AllocateStatus /= 0) STOP "*** Not enough memory ***"

   allocate( C(m), stat = AllocateStatus)
   IF (AllocateStatus /= 0) STOP "*** Not enough memory ***"

   allocate( D(m), stat = AllocateStatus)
   IF (AllocateStatus /= 0) STOP "*** Not enough memory ***"

   ! Put random data into arrays A and B
   call random_seed()
   call random_number(A)
   call random_number(B)
   do j = 1,n 
      do i = 1,m
          A(i,j) = int(A(i,j)*10.0)
          B(i,j) = int(B(i,j)*10.0)
      end do
   end do

   ! sourced allocation here allocates A_d to be the same size as A, and initializes
   ! the contents of A_d with values in A, i.e. is does the host2device transfer
   allocate( A_d, source = A, stat = AllocateStatus)
   IF (AllocateStatus /= 0) STOP "*** Not enough memory for A_d on device ***"
   allocate( B_d, source = B, stat = AllocateStatus)
   IF (AllocateStatus /= 0) STOP "*** Not enough memory for B_d on device ***"
   ! allocation with mold= just does the allocation but no the initialization
   allocate( C_d, mold = C, stat = AllocateStatus)
   IF (AllocateStatus /= 0) STOP "*** Not enough memory for C_d on device ***"

   ! Call dot_acc
   call dot_acc(A_d, B_d, C_d, m, n)
   C = C_d

   ! Call dot on CPU
   call dot(A, B, D, m, n)

   ! Check if error is acceptable
   write(*,*) 'maxval(abs(D-C)): ', maxval(abs(D-C))

end program

