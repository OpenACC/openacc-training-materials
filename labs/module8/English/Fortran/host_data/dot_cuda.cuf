module dot_cuda_m
  integer, parameter :: tpb = 512  ! threads per block
contains
   subroutine dot_cuda(A, B, C, m, n)
      use cudafor
      real, device, intent(in) :: A(:,:)
      real, device, intent(in) :: B(:,:)
      real, device, intent(inout) :: C(:)
      integer, intent(in) :: m, n

      !real, device, allocatable :: A_d(:,:)
      !real, device, allocatable :: B_d(:,:)
      !real, device, allocatable :: C_d(:)
      !integer :: AllocateStatus

      write(*,*) 'Allocating device data ...'
      
      ! sourced allocation here allocates A_d to be the same size as A, and initializes
      ! the contents of A_d with values in A, i.e. is does the host2device transfer
      !allocate( A_d, source = A, stat = AllocateStatus)
      !write(*,*) 'after A_d'
      !IF (AllocateStatus /= 0) STOP "*** Not enough memory for A_d on device ***"
      !allocate( B_d, source = B, stat = AllocateStatus)
      !IF (AllocateStatus /= 0) STOP "*** Not enough memory for B_d on device ***"
      !write(*,*) 'after _d'
      ! allocation with mold= just does the allocation but no the initialization
      !allocate( C_d, mold = C, stat = AllocateStatus)
      !IF (AllocateStatus /= 0) STOP "*** Not enough memory for C_d on device ***"

      
      write(*,*) 'Launching kernel with blocksize :', tpb
      
      !call mydot_kernel<<<n, tpb>>>(A_d,B_d,C_d,m,n)
      call mydot_kernel<<<n, tpb>>>(A, B, C, m, n)

      !C = C_d  ! no explicit synchronization needed, this waits until the kernel is finished

      !deallocate(A_d, B_d, C_d)

      return
   end subroutine


   attributes (global) subroutine mydot_kernel(A, B, C, m, n)
      real, intent(in) :: A(m,n)
      real, intent(in) :: B(m,n)
      real, intent(inout) :: C(m)
      integer, value :: m, n

      real, shared :: sum_s(tpb)
      real :: s
      integer :: i, tid, j, nr

      tid = threadidx%x
      j = blockIdx%x
            
      ! do block-stride loop to collect A(tid:m:tpb,j)*B(tid:m:tpb,j) in sum_s(tid) 
      s = 0
      do i = tid, m, tpb
         s = s + A(i,j)*B(i,j)
      enddo
      sum_s(tid) = s
      call syncthreads()
      
      ! now reduce sum_s within block so sum_s(1) holds sum of A(:,j)*B(:,j)

      nr = blockDim%x/2
      do
         if (nr == 0) exit
         if (tid <= nr) sum_s(tid) = sum_s(tid) + sum_s(tid+nr)
         nr = nr/2
         call syncthreads()
      end do

      if (tid == 1) C(j) = sum_s(1) 
      
      return
   end subroutine



end module dot_cuda_m
